import  {type NextRequest, NextResponse } from "next/server"
import { EnumTokens } from "./services/auth/auth-token.service"
import { PUBLIC_URL } from "./config/url.config"

// export async function middleware(request: NextRequest){
//     const refreshToken = request.cookies.get(EnumTokens.REFRESH_TOKEN)?.value
    

//     const allCookies = request.cookies.getAll();
//     console.log("üöÄ ~ All cookies:", allCookies);
//      // –®—É–∫–∞–π—Ç–µ refreshToken —Å–µ—Ä–µ–¥ –≤—Å—ñ—Ö cookies
//      const refreshTokenCookie = allCookies.find(cookie =>
//         cookie.name.includes('refresh') ||
//         cookie.name.includes('Refresh')
//     );
    
//     console.log("üöÄ ~ Found refresh cookie:", refreshTokenCookie);

//     const isAuthPage = request.url.includes(PUBLIC_URL.auth())
    
//     if (isAuthPage) {
//         if (refreshToken) {
//             return NextResponse.redirect( new URL(PUBLIC_URL.home(), request.url))
//         }
//         return NextResponse.next()
//     }

//     if (refreshToken === undefined) {
//         return NextResponse.redirect(new URL(PUBLIC_URL.auth(), request.url))
//     }

//     return NextResponse.next()
// }

// export const config = {
//     matcher: ['/dashboard/:path*', '/store/:path*', '/auth']
// }

// –¢–∏–º—á–∞—Å–æ–≤–æ —Å–ø—Ä–æ—Å—Ç—ñ—Ç—å middleware

// –í–∞—Ä—ñ–∞–Ω—Ç 2

// export async function middleware(request: NextRequest) {
//     const { pathname } = request.nextUrl;
    
//     // –¢—ñ–ª—å–∫–∏ –¥–ª—è auth —Å—Ç–æ—Ä—ñ–Ω–∫–∏
//     if (pathname === '/auth') {
//         const refreshToken = request.cookies.get(EnumTokens.REFRESH_TOKEN)?.value;
//         const accessToken = request.cookies.get(EnumTokens.ACCESS_TOKEN)?.value;
        
//         if (refreshToken || accessToken) {
//             return NextResponse.redirect(new URL('/dashboard', request.url));
//         }
//     }
    
//     // –î–ª—è –≤—Å—å–æ–≥–æ —ñ–Ω—à–æ–≥–æ - –¥–æ–∑–≤–æ–ª–∏—Ç–∏
//     return NextResponse.next();
// }

// export const config = {
//     matcher: ['/auth'] // ‚Üê –¢—ñ–ª—å–∫–∏ –¥–ª—è auth —Å—Ç–æ—Ä—ñ–Ω–∫–∏
// }

// –í–∞—Ä—ñ–∞–Ω—Ç 3

// Middleware —Ç—ñ–ª—å–∫–∏ –¥–ª—è auth —Å—Ç–æ—Ä—ñ–Ω–∫–∏
export async function middleware(request: NextRequest) {
    const { pathname } = request.nextUrl;
    
    // –¢—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ auth —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if (pathname === '/auth') {
        const refreshToken = request.cookies.get(EnumTokens.REFRESH_TOKEN)?.value;
        const accessToken = request.cookies.get(EnumTokens.ACCESS_TOKEN)?.value;
        
        if (refreshToken || accessToken) {
            return NextResponse.redirect(new URL('/dashboard', request.url));
        }
    }
    
    return NextResponse.next();
}

export const config = {
    matcher: ['/auth'] // –¢—ñ–ª—å–∫–∏ –¥–ª—è auth
}